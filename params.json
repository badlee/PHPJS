{
  "name": "PHPJS",
  "tagline": "Reel javascript VM inside PHP",
  "body": "# PHPJS\r\n\r\n***This is experimental***\r\n\r\nRun javascript inside PHP, powered by the awesome [Duktape](http://duktape.org) Javascript engine.\r\n\r\nWhy?\r\n----\r\n\r\n1. It's fun!\r\n2. Javascript is becoming mainstream, with hundreds of libraries. Having an easy way of sharing code with Javascript natively makes using\r\n3. \r\n\r\nHow to install it?\r\n------------------\r\n\r\n```bash\r\nphpize\r\n./configure --enable-phpjs\r\nmake install\r\n```\r\n\r\nThen add `extension=phpjs.so` to your php.ini\r\n\r\nHow to use it?\r\n\r\nThere is `JS` class, each instance runs it's own Javascript *virtual machine* (or duktape's context).\r\n\r\n\r\n```php\r\n$js1 = new JS;\r\n$js1->load(\"foobar.js\");\r\n```\r\n\r\nThe `JS` object is like a proxy between the `Javascript` and the `PHP` userlands. In the PHP side, the `JS` looks like an Array or an object.\r\n\r\n```php\r\n$js['foobar'] = 1; // Set `foobar` inside Javascript (global variable)\r\nvar_dump($js['XXX']); // Read global variable 'XXX' from javascript\r\n$js->fnc(); // Call fnc() function from Javascript.\r\n```\r\n\r\nInside `Javascript` there are also some intergration. For instance we have a `PHP` (or `$PHP`) global object.\r\n\r\n```js\r\nPHP.var_dump(\"something\"); // Call a PHP function!\r\nPHP.$something = 1; // set a variable\r\nprint(PHP.$something_else); // read a variable from PHP\r\n```\r\n\r\n## Documentation\r\n\r\n### JS Object (API)\r\n\r\n\r\n#### __constructor\r\n\r\n**@PARAMS**\r\n\t$allowedVarAndFunc (Optional) : String[]\r\n\t\tArray to PHP function and global variables updatable via PHP's object\r\n\r\n```PHP\r\n$VM = new JS(/*$allowedVarAndFunc*/);\r\n// the VM can handle any PHP function and get/set any PHP global variables\r\n\r\n$VM = new JS(['$myVar','$args','$argv','apache_getenv','apache_get_module','headers','date']);\r\n// the VM can handle only PHP function and get/set any PHP global variables listed\r\n```\r\n\r\n#### load\r\n\r\n**@PARAMS**\r\n\t$filename : String\r\n\t\tpath to js source file (Absolute ou Relative)\r\n\r\n```PHP\r\n$VM = new JS;\r\n$VM->load(\"file.js\"); // relative path,  throw an error if file not found\r\n$VM->load(\"/tmp/file2.js\"); // with an absolute path\r\n```\r\n\r\n#### evaluate\r\n\r\n**@PARAMS**\r\n\t$jsCode : String\r\n\t\tpath to js source to execute\r\n\r\n```PHP\r\n$VM = new JS;\r\n$VM->evaluate(\"var i = 1; print('From JS CODE',i);\");\r\n$VM->evaluate(\"i++;print('From JS CODE',i);\"); // allow to share data across code evalution (it's a same context)\r\n```\r\n\r\n### Modules\r\n\r\n#### Module loading\r\n\r\nPHPJS (Duktape) has a built-in minimal module loading framework based on [CommonJS modules version 1.1.1](http://wiki.commonjs.org/wiki/Modules/1.1.1), with additional support for module.exports.\r\n\r\nModule is writen in javascript only\r\n\r\n```JS\r\n// Module foo/bar\r\nexports.hello = function(){\r\n  print(\"world\");\r\n}\r\n```\r\n\r\nYou can load modules from javascript code with the global require() function:\r\n\r\n```JS\r\nvar mod = require('foo/bar');\r\nmod.hello();\r\n```\r\n\r\n#### Module lookup function\r\n\r\nThe modules lookup function is the PHP's global `JSModSearch` or the local function `$JS->JSModSearch`\r\n\r\n##### global lookup function\r\n\r\n```PHP\r\n// Global lookup function\r\nfunction JSModSearch($id){\r\n    if ($id === 'foo') {\r\n        return 'exports.hello = function() { print(\"Hello from foo!\"); };';\r\n    } else if ($id === 'bar') {\r\n        return 'exports.hello = function() { print(\"Hello from bar!\"); };';\r\n    }\r\n}\r\n/* shared PHP vars and function */\r\n$js = new JS([]);\r\n$JS = '\r\nvar foo = require(\"foo\");\r\nfoo.hello();\r\nvar bar = require(\"bar\");\r\nbar.hello();\r\ntry{\r\n\tvar nonExistentModule = require(\"nonExistentModule\");\r\n}catch(e){\r\n\t print(\"expected exception: \" + e.message);\r\n}\r\n';\r\n$js->evaluate($JS);\r\n```\r\n\r\n##### local lookup function\r\n\r\n```PHP\r\n/* shared PHP vars and function */\r\n$js = new JS();\r\n// Local lookup function\r\n$js->JSModSearch = function ($id){\r\n    if ($id === 'foo/bar') {\r\n        return 'exports.hello = function() { print(\"Hello from foo/bar!\"); };';\r\n    } else if ($id === 'bar') {\r\n        return 'exports.hello = function() { print(\"Hello from bar!\"); };';\r\n    }\r\n};\r\n\r\n$JS = '\r\nvar foo = require(\"foo\");\r\nfoo.hello();\r\n';\r\n$js->evaluate($JS);\r\n```\r\n\r\nMore\r\n----\r\n\r\n*For more documentation look tests folder*\r\n\r\nTODO\r\n----\r\n\r\n1. Better sharing of objects between PHP and Javascript\r\n2. More documentation\r\n3. More integration :-)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}